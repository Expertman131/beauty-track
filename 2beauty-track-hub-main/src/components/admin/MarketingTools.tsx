
import React, { useState } from 'react';
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Dialog, DialogTrigger, DialogContent, DialogHeader, DialogTitle, DialogDescription, DialogFooter } from "@/components/ui/dialog";
import { Popover, PopoverContent, PopoverTrigger } from "@/components/ui/popover";
import { Command, CommandEmpty, CommandGroup, CommandInput, CommandItem } from "@/components/ui/command";
import { Calendar } from "@/components/ui/calendar";
import { format } from "date-fns";
import { Check, CalendarClock, Send, History, Gift, Star, Phone, Mail, Smile, ChevronDown, Plus } from "lucide-react";
import { Badge } from "@/components/ui/badge";
import { cn } from "@/lib/utils";
import { toast } from "@/hooks/use-toast";
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table";

const MarketingTools = () => {
  // State for message campaigns
  const [campaignMessage, setCampaignMessage] = useState('');
  const [campaignTitle, setCampaignTitle] = useState('');
  const [targetChannel, setTargetChannel] = useState<'email' | 'sms' | 'telegram'>('email');
  const [showScheduleDialog, setShowScheduleDialog] = useState(false);
  const [scheduleDate, setScheduleDate] = useState<Date | undefined>(new Date());
  const [scheduleTime, setScheduleTime] = useState('12:00');

  // State for emoji picker
  const [showEmojiPopover, setShowEmojiPopover] = useState(false);
  
  // Sample emojis list
  const emojis = ['üòä', '‚ù§Ô∏è', 'üéâ', 'üëç', '‚ú®', 'üå∏', 'üíØ', 'üôè', 'ü§ó', 'ü•∞', '‚úÖ', 'üî•', 'üíã', 'üíÅ‚Äç‚ôÄÔ∏è', 'üå∫', 'üíÖ', 'üëë', 'üéÅ', 'üåà', 'üí´'];
  
  // State for reviews
  const [reviewClients, setReviewClients] = useState([
    { id: '1', name: '–ï–ª–µ–Ω–∞ –ü–µ—Ç—Ä–æ–≤–∞', lastVisit: '12.04.2025', service: '–ú–∞–Ω–∏–∫—é—Ä' },
    { id: '2', name: '–ê–Ω–Ω–∞ –ö—É–∑–Ω–µ—Ü–æ–≤–∞', lastVisit: '10.04.2025', service: '–ü–µ–¥–∏–∫—é—Ä' },
    { id: '3', name: '–ú–∞—Ä–∏—è –°–æ–∫–æ–ª–æ–≤–∞', lastVisit: '08.04.2025', service: '–ù–∞—Ä–∞—â–∏–≤–∞–Ω–∏–µ —Ä–µ—Å–Ω–∏—Ü' },
    { id: '4', name: '–°–≤–µ—Ç–ª–∞–Ω–∞ –ò–≤–∞–Ω–æ–≤–∞', lastVisit: '05.04.2025', service: '–û–∫—Ä–∞—à–∏–≤–∞–Ω–∏–µ –≤–æ–ª–æ—Å' },
  ]);
  const [selectedClient, setSelectedClient] = useState<string | null>(null);
  const [openClientSelector, setOpenClientSelector] = useState(false);

  // State for birthday gifts
  const [birthdayClients, setBirthdayClients] = useState([
    { id: '1', name: '–ï–ª–µ–Ω–∞ –ü–µ—Ç—Ä–æ–≤–∞', birthday: '25.04', phone: '+7 (900) 123-45-67' },
    { id: '2', name: '–ê–Ω–Ω–∞ –ö—É–∑–Ω–µ—Ü–æ–≤–∞', birthday: '27.04', phone: '+7 (900) 234-56-78' },
    { id: '3', name: '–ú–∞—Ä–∏—è –°–æ–∫–æ–ª–æ–≤–∞', birthday: '30.04', phone: '+7 (900) 345-67-89' },
  ]);
  const [openGiftDialog, setOpenGiftDialog] = useState(false);
  const [selectedBirthdayClient, setSelectedBirthdayClient] = useState<string | null>(null);
  const [giftType, setGiftType] = useState<'bonus' | 'discount'>('bonus');
  const [giftValue, setGiftValue] = useState('500');
  
  // State for auto-greetings
  const [openAutoGreetingDialog, setOpenAutoGreetingDialog] = useState(false);
  const [greetingTemplate, setGreetingTemplate] = useState('–î–æ—Ä–æ–≥–æ–π(–∞—è) {name}, –ø–æ–∑–¥—Ä–∞–≤–ª—è–µ–º –í–∞—Å —Å –¥–Ω–µ–º —Ä–æ–∂–¥–µ–Ω–∏—è! –í –ø–æ–¥–∞—Ä–æ–∫ –¥–∞—Ä–∏–º –í–∞–º {bonus} –±–æ–Ω—É—Å–Ω—ã—Ö –±–∞–ª–ª–æ–≤. –ñ–¥–µ–º –í–∞—Å –≤ –Ω–∞—à–µ–º —Å–∞–ª–æ–Ω–µ!');
  const [autoGreetingEnabled, setAutoGreetingEnabled] = useState(true);
  
  // Sample campaign history
  const campaignHistory = [
    { id: '1', title: '–í–µ—Å–µ–Ω–Ω—è—è –∞–∫—Ü–∏—è', channel: 'email', sent: 142, date: '15.04.2025', status: 'completed' },
    { id: '2', title: '–ù–æ–≤—ã–µ —É—Å–ª—É–≥–∏', channel: 'sms', sent: 87, date: '01.04.2025', status: 'completed' },
    { id: '3', title: '–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ', channel: 'telegram', sent: 0, date: '30.04.2025', status: 'scheduled' },
  ];
  
  // Dialog state for campaign details
  const [openCampaignDetails, setOpenCampaignDetails] = useState(false);
  const [selectedCampaign, setSelectedCampaign] = useState<any>(null);

  // Insert emoji into message
  const insertEmoji = (emoji: string) => {
    setCampaignMessage(prev => prev + emoji);
    setShowEmojiPopover(false);
  };

  // Handle scheduling
  const handleSchedule = () => {
    if (!scheduleDate) {
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è",
        variant: "destructive"
      });
      return;
    }

    const scheduledDateTime = `${format(scheduleDate, 'dd.MM.yyyy')} –≤ ${scheduleTime}`;
    
    toast({
      title: "–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞",
      description: `–†–∞—Å—Å—ã–ª–∫–∞ "${campaignTitle}" –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ ${scheduledDateTime}`
    });
    
    setShowScheduleDialog(false);
    setCampaignTitle('');
    setCampaignMessage('');
  };

  // Handle send review request
  const handleSendReviewRequest = () => {
    if (!selectedClient) {
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: "–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –æ—Ç–∑—ã–≤–∞",
        variant: "destructive"
      });
      return;
    }

    const client = reviewClients.find(c => c.id === selectedClient);
    
    toast({
      title: "–ó–∞–ø—Ä–æ—Å –æ—Ç–∑—ã–≤–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω",
      description: `–ó–∞–ø—Ä–æ—Å –æ—Ç–∑—ã–≤–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫–ª–∏–µ–Ω—Ç—É ${client?.name}`
    });
    
    setSelectedClient(null);
    setOpenClientSelector(false);
  };

  // Handle send gift
  const handleSendGift = () => {
    if (!selectedBirthdayClient || !giftValue) {
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: "–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∏–µ–Ω—Ç–∞ –∏ —É–∫–∞–∂–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–¥–∞—Ä–∫–∞",
        variant: "destructive"
      });
      return;
    }

    const client = birthdayClients.find(c => c.id === selectedBirthdayClient);
    
    toast({
      title: "–ü–æ–¥–∞—Ä–æ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω",
      description: `${giftType === 'bonus' ? '–ë–æ–Ω—É—Å—ã' : '–°–∫–∏–¥–∫–∞'} (${giftValue} ${giftType === 'bonus' ? '–±–∞–ª–ª–æ–≤' : '%'}) –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –∫–ª–∏–µ–Ω—Ç—É ${client?.name}`
    });
    
    setOpenGiftDialog(false);
    setSelectedBirthdayClient(null);
  };

  // Handle save auto greetings
  const handleSaveAutoGreetings = () => {
    toast({
      title: "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã",
      description: `–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è ${autoGreetingEnabled ? '–≤–∫–ª—é—á–µ–Ω—ã' : '–æ—Ç–∫–ª—é—á–µ–Ω—ã'}`
    });
    
    setOpenAutoGreetingDialog(false);
  };

  // Handle send campaign
  const handleSendCampaign = () => {
    if (!campaignTitle || !campaignMessage) {
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è",
        variant: "destructive"
      });
      return;
    }
    
    toast({
      title: "–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞",
      description: `–†–∞—Å—Å—ã–ª–∫–∞ "${campaignTitle}" –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —á–µ—Ä–µ–∑ ${targetChannel}`
    });
    
    setCampaignTitle('');
    setCampaignMessage('');
  };

  // Handle campaign details
  const handleViewCampaignDetails = (campaign: any) => {
    setSelectedCampaign(campaign);
    setOpenCampaignDetails(true);
  };

  return (
    <Tabs defaultValue="campaigns" className="w-full">
      <TabsList className="mb-6">
        <TabsTrigger value="campaigns">–†–∞—Å—Å—ã–ª–∫–∏</TabsTrigger>
        <TabsTrigger value="reviews">–û—Ç–∑—ã–≤—ã</TabsTrigger>
        <TabsTrigger value="birthdays">–î–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è</TabsTrigger>
      </TabsList>

      {/* Campaigns Tab */}
      <TabsContent value="campaigns" className="space-y-6">
        <Card>
          <CardHeader>
            <CardTitle>–°–æ–∑–¥–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É</CardTitle>
            <CardDescription>–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –∏–ª–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–∞–º</CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
              <div className="md:col-span-3">
                <label className="block text-sm font-medium mb-1">–ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ä–∞—Å—Å—ã–ª–∫–∏</label>
                <Input
                  value={campaignTitle}
                  onChange={(e) => setCampaignTitle(e.target.value)}
                  placeholder="–í–≤–µ–¥–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫"
                />
              </div>
              
              <div>
                <label className="block text-sm font-medium mb-1">–ö–∞–Ω–∞–ª</label>
                <select
                  className="w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background"
                  value={targetChannel}
                  onChange={(e) => setTargetChannel(e.target.value as 'email' | 'sms' | 'telegram')}
                >
                  <option value="email">Email</option>
                  <option value="sms">SMS</option>
                  <option value="telegram">Telegram</option>
                </select>
              </div>
            </div>

            <div>
              <div className="flex justify-between mb-1">
                <label className="block text-sm font-medium">–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è</label>
                <Popover open={showEmojiPopover} onOpenChange={setShowEmojiPopover}>
                  <PopoverTrigger asChild>
                    <Button variant="outline" size="sm">
                      <Smile className="h-4 w-4 mr-1" />
                      –≠–º–æ–¥–∑–∏
                    </Button>
                  </PopoverTrigger>
                  <PopoverContent className="w-64">
                    <div className="grid grid-cols-5 gap-2">
                      {emojis.map((emoji, index) => (
                        <Button 
                          key={index} 
                          variant="ghost" 
                          className="h-10 w-10" 
                          onClick={() => insertEmoji(emoji)}
                        >
                          {emoji}
                        </Button>
                      ))}
                    </div>
                  </PopoverContent>
                </Popover>
              </div>
              <Textarea
                value={campaignMessage}
                onChange={(e) => setCampaignMessage(e.target.value)}
                placeholder="–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è"
                rows={6}
              />
            </div>
          </CardContent>
          <CardFooter className="flex justify-between">
            <Dialog open={showScheduleDialog} onOpenChange={setShowScheduleDialog}>
              <DialogTrigger asChild>
                <Button variant="outline">
                  <CalendarClock className="h-4 w-4 mr-2" />
                  –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å
                </Button>
              </DialogTrigger>
              <DialogContent>
                <DialogHeader>
                  <DialogTitle>–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É</DialogTitle>
                  <DialogDescription>
                    –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–∞—Å—Å—ã–ª–∫–∏
                  </DialogDescription>
                </DialogHeader>
                <div className="grid gap-4 py-4">
                  <div>
                    <label className="block text-sm font-medium mb-2">–î–∞—Ç–∞</label>
                    <Calendar
                      mode="single"
                      selected={scheduleDate}
                      onSelect={setScheduleDate}
                      className="p-3 pointer-events-auto"
                      disabled={(date) => date < new Date()}
                    />
                  </div>
                  <div>
                    <label className="block text-sm font-medium mb-1">–í—Ä–µ–º—è</label>
                    <Input
                      type="time"
                      value={scheduleTime}
                      onChange={(e) => setScheduleTime(e.target.value)}
                    />
                  </div>
                </div>
                <DialogFooter>
                  <Button variant="outline" onClick={() => setShowScheduleDialog(false)}>–û—Ç–º–µ–Ω–∞</Button>
                  <Button onClick={handleSchedule}>–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å</Button>
                </DialogFooter>
              </DialogContent>
            </Dialog>

            <Button onClick={handleSendCampaign}>
              <Send className="h-4 w-4 mr-2" />
              –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–µ–π—á–∞—Å
            </Button>
          </CardFooter>
        </Card>

        <Card>
          <CardHeader>
            <CardTitle>–ò—Å—Ç–æ—Ä–∏—è —Ä–∞—Å—Å—ã–ª–æ–∫</CardTitle>
            <CardDescription>–ò—Å—Ç–æ—Ä–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –∏ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–∞—Å—Å—ã–ª–æ–∫</CardDescription>
          </CardHeader>
          <CardContent>
            <Table>
              <TableHeader>
                <TableRow>
                  <TableHead>–ó–∞–≥–æ–ª–æ–≤–æ–∫</TableHead>
                  <TableHead>–ö–∞–Ω–∞–ª</TableHead>
                  <TableHead>–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ</TableHead>
                  <TableHead>–î–∞—Ç–∞</TableHead>
                  <TableHead>–°—Ç–∞—Ç—É—Å</TableHead>
                  <TableHead className="text-right">–î–µ–π—Å—Ç–≤–∏—è</TableHead>
                </TableRow>
              </TableHeader>
              <TableBody>
                {campaignHistory.map((campaign) => (
                  <TableRow key={campaign.id}>
                    <TableCell className="font-medium">{campaign.title}</TableCell>
                    <TableCell>
                      {campaign.channel === 'email' && 'Email'}
                      {campaign.channel === 'sms' && 'SMS'}
                      {campaign.channel === 'telegram' && 'Telegram'}
                    </TableCell>
                    <TableCell>{campaign.sent}</TableCell>
                    <TableCell>{campaign.date}</TableCell>
                    <TableCell>
                      <Badge variant={campaign.status === 'completed' ? 'default' : 'outline'}>
                        {campaign.status === 'completed' ? '–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ' : '–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ'}
                      </Badge>
                    </TableCell>
                    <TableCell className="text-right">
                      <Button variant="ghost" size="sm" onClick={() => handleViewCampaignDetails(campaign)}>
                        –ü–æ–¥—Ä–æ–±–Ω–µ–µ
                      </Button>
                    </TableCell>
                  </TableRow>
                ))}
              </TableBody>
            </Table>
          </CardContent>
        </Card>

        <Dialog open={openCampaignDetails} onOpenChange={setOpenCampaignDetails}>
          <DialogContent className="sm:max-w-[600px]">
            <DialogHeader>
              <DialogTitle>–î–µ—Ç–∞–ª–∏ —Ä–∞—Å—Å—ã–ª–∫–∏</DialogTitle>
            </DialogHeader>
            {selectedCampaign && (
              <div className="space-y-4">
                <div>
                  <h3 className="text-sm font-medium text-beauty-700">–ó–∞–≥–æ–ª–æ–≤–æ–∫</h3>
                  <p>{selectedCampaign.title}</p>
                </div>
                <div>
                  <h3 className="text-sm font-medium text-beauty-700">–ö–∞–Ω–∞–ª</h3>
                  <p>
                    {selectedCampaign.channel === 'email' && 'Email'}
                    {selectedCampaign.channel === 'sms' && 'SMS'}
                    {selectedCampaign.channel === 'telegram' && 'Telegram'}
                  </p>
                </div>
                <div>
                  <h3 className="text-sm font-medium text-beauty-700">–î–∞—Ç–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏</h3>
                  <p>{selectedCampaign.date}</p>
                </div>
                <div>
                  <h3 className="text-sm font-medium text-beauty-700">–°—Ç–∞—Ç—É—Å</h3>
                  <Badge variant={selectedCampaign.status === 'completed' ? 'default' : 'outline'}>
                    {selectedCampaign.status === 'completed' ? '–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ' : '–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ'}
                  </Badge>
                </div>
                <div>
                  <h3 className="text-sm font-medium text-beauty-700">–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ</h3>
                  <p>{selectedCampaign.sent} –∫–ª–∏–µ–Ω—Ç–∞–º</p>
                </div>
                <div>
                  <h3 className="text-sm font-medium text-beauty-700">–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ</h3>
                  <p className="p-3 bg-muted rounded-md mt-2">
                    –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏...
                  </p>
                </div>
                {selectedCampaign.status === 'completed' && (
                  <div>
                    <h3 className="text-sm font-medium text-beauty-700">–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</h3>
                    <div className="grid grid-cols-3 gap-4 mt-2">
                      <div className="p-2 bg-muted rounded-md text-center">
                        <p className="text-xs text-beauty-700">–û—Ç–∫—Ä—ã—Ç–æ</p>
                        <p className="text-lg font-bold">{Math.floor(selectedCampaign.sent * 0.75)}</p>
                        <p className="text-xs">({Math.floor(75)}%)</p>
                      </div>
                      <div className="p-2 bg-muted rounded-md text-center">
                        <p className="text-xs text-beauty-700">–ü–µ—Ä–µ—Ö–æ–¥—ã</p>
                        <p className="text-lg font-bold">{Math.floor(selectedCampaign.sent * 0.32)}</p>
                        <p className="text-xs">({Math.floor(32)}%)</p>
                      </div>
                      <div className="p-2 bg-muted rounded-md text-center">
                        <p className="text-xs text-beauty-700">–ó–∞–ø–∏—Å–∏</p>
                        <p className="text-lg font-bold">{Math.floor(selectedCampaign.sent * 0.08)}</p>
                        <p className="text-xs">({Math.floor(8)}%)</p>
                      </div>
                    </div>
                  </div>
                )}
              </div>
            )}
            <DialogFooter>
              <Button onClick={() => setOpenCampaignDetails(false)}>–ó–∞–∫—Ä—ã—Ç—å</Button>
            </DialogFooter>
          </DialogContent>
        </Dialog>
      </TabsContent>

      {/* Reviews Tab */}
      <TabsContent value="reviews" className="space-y-6">
        <Card>
          <CardHeader>
            <CardTitle>–ó–∞–ø—Ä–æ—Å–∏—Ç—å –æ—Ç–∑—ã–≤</CardTitle>
            <CardDescription>–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–∑—ã–≤ –∫–ª–∏–µ–Ω—Ç—É –ø–æ—Å–ª–µ –ø–æ—Å–µ—â–µ–Ω–∏—è</CardDescription>
          </CardHeader>
          <CardContent>
            <div className="space-y-4">
              <div>
                <label className="block text-sm font-medium mb-1">–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∏–µ–Ω—Ç–∞</label>
                <Popover open={openClientSelector} onOpenChange={setOpenClientSelector}>
                  <PopoverTrigger asChild>
                    <Button
                      variant="outline"
                      role="combobox"
                      aria-expanded={openClientSelector}
                      className="w-full justify-between"
                    >
                      {selectedClient
                        ? reviewClients.find((client) => client.id === selectedClient)?.name
                        : "–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∏–µ–Ω—Ç–∞"}
                      <ChevronDown className="ml-2 h-4 w-4 shrink-0 opacity-50" />
                    </Button>
                  </PopoverTrigger>
                  <PopoverContent className="w-full p-0">
                    <Command>
                      <CommandInput placeholder="–ü–æ–∏—Å–∫ –∫–ª–∏–µ–Ω—Ç–∞..." />
                      <CommandEmpty>–ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.</CommandEmpty>
                      <CommandGroup>
                        {reviewClients.map((client) => (
                          <CommandItem
                            key={client.id}
                            value={client.name}
                            onSelect={() => {
                              setSelectedClient(client.id);
                              setOpenClientSelector(false);
                            }}
                          >
                            <Check
                              className={cn(
                                "mr-2 h-4 w-4",
                                selectedClient === client.id ? "opacity-100" : "opacity-0"
                              )}
                            />
                            <div className="flex flex-col">
                              <span>{client.name}</span>
                              <span className="text-xs text-beauty-500">
                                –ü–æ—Å–ª–µ–¥–Ω–µ–µ –ø–æ—Å–µ—â–µ–Ω–∏–µ: {client.lastVisit}, –£—Å–ª—É–≥–∞: {client.service}
                              </span>
                            </div>
                          </CommandItem>
                        ))}
                      </CommandGroup>
                    </Command>
                  </PopoverContent>
                </Popover>
              </div>

              <div>
                <label className="block text-sm font-medium mb-1">–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ</label>
                <Textarea placeholder="–í–≤–µ–¥–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)" rows={3} />
              </div>

              <div className="flex justify-between items-center p-4 bg-muted rounded-md">
                <div>
                  <h4 className="text-sm font-medium">–ó–∞–ø—Ä–æ—Å –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —á–µ—Ä–µ–∑:</h4>
                  <div className="flex space-x-4 mt-2">
                    <div className="flex items-center space-x-2">
                      <Mail className="h-4 w-4 text-beauty-500" />
                      <span className="text-sm">Email</span>
                    </div>
                    <div className="flex items-center space-x-2">
                      <Phone className="h-4 w-4 text-beauty-500" />
                      <span className="text-sm">SMS</span>
                    </div>
                  </div>
                </div>
                <Button onClick={handleSendReviewRequest}>
                  <Star className="h-4 w-4 mr-2" />
                  –ó–∞–ø—Ä–æ—Å–∏—Ç—å –æ—Ç–∑—ã–≤
                </Button>
              </div>
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardHeader>
            <CardTitle>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ—Ç–∑—ã–≤—ã</CardTitle>
            <CardDescription>–û—Ç–∑—ã–≤—ã, –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤</CardDescription>
          </CardHeader>
          <CardContent>
            <div className="space-y-4">
              {[
                { name: '–ï–ª–µ–Ω–∞', date: '15.04.2025', rating: 5, text: '–û—Ç–ª–∏—á–Ω—ã–π —Å–µ—Ä–≤–∏—Å, –æ—á–µ–Ω—å –¥–æ–≤–æ–ª—å–Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º!' },
                { name: '–ú–∞—Ä–∏—è', date: '10.04.2025', rating: 4, text: '–•–æ—Ä–æ—à–∏–π —Å–∞–ª–æ–Ω, –ø—Ä–∏—è—Ç–Ω–∞—è –∞—Ç–º–æ—Å—Ñ–µ—Ä–∞, –Ω–æ –Ω–µ–º–Ω–æ–≥–æ –∑–∞–¥–µ—Ä–∂–∞–ª–∏ —Å –Ω–∞—á–∞–ª–æ–º –ø—Ä–æ—Ü–µ–¥—É—Ä—ã.' },
                { name: '–°–≤–µ—Ç–ª–∞–Ω–∞', date: '05.04.2025', rating: 5, text: '–ü—Ä–µ–≤–æ—Å—Ö–æ–¥–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –≤–µ—Ä–Ω—É—Å—å —Å–Ω–æ–≤–∞!' },
              ].map((review, index) => (
                <div key={index} className="p-4 border rounded-md">
                  <div className="flex justify-between items-center mb-2">
                    <div className="font-medium">{review.name}</div>
                    <div className="text-sm text-beauty-500">{review.date}</div>
                  </div>
                  <div className="flex mb-2">
                    {Array(5).fill(0).map((_, i) => (
                      <Star
                        key={i}
                        className={`h-4 w-4 ${i < review.rating ? 'text-yellow-400 fill-yellow-400' : 'text-gray-300'}`}
                      />
                    ))}
                  </div>
                  <p className="text-sm">{review.text}</p>
                </div>
              ))}
            </div>
          </CardContent>
        </Card>
      </TabsContent>

      {/* Birthdays Tab */}
      <TabsContent value="birthdays" className="space-y-6">
        <Card>
          <CardHeader>
            <CardTitle>–ë–ª–∏–∂–∞–π—à–∏–µ –¥–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤</CardTitle>
            <CardDescription>–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–ª–∏ –ø–æ–¥–∞—Ä–æ–∫</CardDescription>
          </CardHeader>
          <CardContent>
            <Table>
              <TableHeader>
                <TableRow>
                  <TableHead>–ö–ª–∏–µ–Ω—Ç</TableHead>
                  <TableHead>–î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è</TableHead>
                  <TableHead>–¢–µ–ª–µ—Ñ–æ–Ω</TableHead>
                  <TableHead className="text-right">–î–µ–π—Å—Ç–≤–∏—è</TableHead>
                </TableRow>
              </TableHeader>
              <TableBody>
                {birthdayClients.map((client) => (
                  <TableRow key={client.id}>
                    <TableCell className="font-medium">{client.name}</TableCell>
                    <TableCell>{client.birthday}</TableCell>
                    <TableCell>{client.phone}</TableCell>
                    <TableCell className="text-right">
                      <Button
                        variant="ghost"
                        size="sm"
                        onClick={() => {
                          setSelectedBirthdayClient(client.id);
                          setOpenGiftDialog(true);
                        }}
                      >
                        <Gift className="h-4 w-4 mr-2" />
                        –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫
                      </Button>
                    </TableCell>
                  </TableRow>
                ))}
              </TableBody>
            </Table>
          </CardContent>
        </Card>

        <Card>
          <CardHeader className="flex flex-row items-center justify-between">
            <div>
              <CardTitle>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è</CardTitle>
              <CardDescription>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–π —Å –¥–Ω–µ–º —Ä–æ–∂–¥–µ–Ω–∏—è</CardDescription>
            </div>
            <Button onClick={() => setOpenAutoGreetingDialog(true)}>
              –ù–∞—Å—Ç—Ä–æ–∏—Ç—å
            </Button>
          </CardHeader>
          <CardContent>
            <div className="p-4 border rounded-md">
              <h4 className="font-medium mb-2">–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏</h4>
              <div className="space-y-2 text-sm">
                <div className="flex justify-between">
                  <span>–°—Ç–∞—Ç—É—Å:</span>
                  <Badge variant="outline" className="bg-green-50 text-green-700">
                    –ê–∫—Ç–∏–≤–Ω–æ
                  </Badge>
                </div>
                <div className="flex justify-between">
                  <span>–û—Ç–ø—Ä–∞–≤–∫–∞:</span>
                  <span>–í –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è, 10:00</span>
                </div>
                <div className="flex justify-between">
                  <span>–ë–æ–Ω—É—Å:</span>
                  <span>500 –±–∞–ª–ª–æ–≤</span>
                </div>
              </div>
            </div>
          </CardContent>
        </Card>

        <Dialog open={openGiftDialog} onOpenChange={setOpenGiftDialog}>
          <DialogContent>
            <DialogHeader>
              <DialogTitle>–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫</DialogTitle>
              <DialogDescription>
                –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∏ —Ä–∞–∑–º–µ—Ä –ø–æ–¥–∞—Ä–∫–∞ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
              </DialogDescription>
            </DialogHeader>
            <div className="space-y-4 py-4">
              <div>
                <label className="block text-sm font-medium mb-1">–ö–ª–∏–µ–Ω—Ç</label>
                <Input
                  value={selectedBirthdayClient ? birthdayClients.find(c => c.id === selectedBirthdayClient)?.name : ''}
                  disabled
                />
              </div>
              <div>
                <label className="block text-sm font-medium mb-1">–¢–∏–ø –ø–æ–¥–∞—Ä–∫–∞</label>
                <select
                  className="w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background"
                  value={giftType}
                  onChange={(e) => setGiftType(e.target.value as 'bonus' | 'discount')}
                >
                  <option value="bonus">–ë–æ–Ω—É—Å—ã</option>
                  <option value="discount">–°–∫–∏–¥–∫–∞</option>
                </select>
              </div>
              <div>
                <label className="block text-sm font-medium mb-1">
                  {giftType === 'bonus' ? '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–æ–Ω—É—Å–æ–≤' : '–†–∞–∑–º–µ—Ä —Å–∫–∏–¥–∫–∏ (%)'}
                </label>
                <Input
                  type="number"
                  value={giftValue}
                  onChange={(e) => setGiftValue(e.target.value)}
                  min="1"
                  max={giftType === 'discount' ? '100' : '10000'}
                />
              </div>
              <div>
                <label className="block text-sm font-medium mb-1">–°–æ–æ–±—â–µ–Ω–∏–µ</label>
                <Textarea
                  placeholder="–ü–æ–∑–¥—Ä–∞–≤–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"
                  defaultValue="–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –¥–Ω–µ–º —Ä–æ–∂–¥–µ–Ω–∏—è! –î–∞—Ä–∏–º –≤–∞–º –ø–æ–¥–∞—Ä–æ–∫ –æ—Ç –Ω–∞—à–µ–≥–æ —Å–∞–ª–æ–Ω–∞."
                  rows={3}
                />
              </div>
            </div>
            <DialogFooter>
              <Button variant="outline" onClick={() => setOpenGiftDialog(false)}>–û—Ç–º–µ–Ω–∞</Button>
              <Button onClick={handleSendGift}>–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫</Button>
            </DialogFooter>
          </DialogContent>
        </Dialog>

        <Dialog open={openAutoGreetingDialog} onOpenChange={setOpenAutoGreetingDialog}>
          <DialogContent className="sm:max-w-[600px]">
            <DialogHeader>
              <DialogTitle>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–π</DialogTitle>
              <DialogDescription>
                –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–π —Å –¥–Ω–µ–º —Ä–æ–∂–¥–µ–Ω–∏—è
              </DialogDescription>
            </DialogHeader>
            <div className="space-y-4 py-4">
              <div className="flex items-center justify-between">
                <label className="text-sm font-medium">–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è</label>
                <input
                  type="checkbox"
                  checked={autoGreetingEnabled}
                  onChange={(e) => setAutoGreetingEnabled(e.target.checked)}
                  className="toggle"
                />
              </div>
              <div>
                <label className="block text-sm font-medium mb-1">–í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏</label>
                <Input
                  type="time"
                  defaultValue="10:00"
                />
              </div>
              <div>
                <label className="block text-sm font-medium mb-1">–†–∞–∑–º–µ—Ä –±–æ–Ω—É—Å–∞</label>
                <Input
                  type="number"
                  defaultValue="500"
                  min="1"
                />
              </div>
              <div>
                <label className="block text-sm font-medium mb-1">–®–∞–±–ª–æ–Ω –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è</label>
                <Textarea
                  value={greetingTemplate}
                  onChange={(e) => setGreetingTemplate(e.target.value)}
                  rows={4}
                />
                <p className="text-xs text-beauty-500 mt-1">
                  –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ {'{name}'} –¥–ª—è –∏–º–µ–Ω–∏ –∫–ª–∏–µ–Ω—Ç–∞ –∏ {'{bonus}'} –¥–ª—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –±–æ–Ω—É—Å–æ–≤
                </p>
              </div>
              <div className="p-4 bg-muted rounded-md">
                <h4 className="text-sm font-medium mb-2">–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä</h4>
                <p className="text-sm">{greetingTemplate.replace('{name}', '–ï–ª–µ–Ω–∞').replace('{bonus}', '500')}</p>
              </div>
            </div>
            <DialogFooter>
              <Button variant="outline" onClick={() => setOpenAutoGreetingDialog(false)}>–û—Ç–º–µ–Ω–∞</Button>
              <Button onClick={handleSaveAutoGreetings}>–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏</Button>
            </DialogFooter>
          </DialogContent>
        </Dialog>
      </TabsContent>
    </Tabs>
  );
};

export default MarketingTools;
